<project name="funz-calculator" default="help" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

    <property name="funz-root.dir" value="${basedir}/.." />
    <property name="funz.properties" location="../funz-profile/funz.properties" />
    <!-- funz dependent properties -->
    <property file="${funz.properties}" />        
    <!-- verify that the ${funz.properties} file has been set -->
    <fail message="Set the funz properties file ${funz.properties} from funz-profile">
        <condition>
            <not>
                <and>
                    <available file="${funz.properties}" type="file" />
                </and>
            </not>
        </condition>
    </fail>

    <!-- funz calculator dependent properties -->
    <property file="funz-calculator.properties"/>

    <path id="antcontrib.classpath">
        <pathelement location="../funz-profile/lib/ant-contrib-0.6.jar" />
    </path>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="../funz-profile/lib/jacocoant.jar"/>
    </taskdef>
    
    <property name="unit.test.jar" value="../funz-profile/lib/concutest-junit-4.7-withrt.jar" />
    <!--property name="unit.test.jar" value="../funz-profile/lib/junit-4.3.jar" /-->

    <taskdef name="for" taskname="for" classname="net.sf.antcontrib.logic.For" classpathref="antcontrib.classpath" />
    <taskdef name="if" taskname="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="antcontrib.classpath" />
    <taskdef name="propertycopy" taskname="propertycopy" classname="net.sf.antcontrib.property.PropertyCopy" classpathref="antcontrib.classpath" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="antcontrib.classpath" />
   
    <property name="Calculator.tmpl" location="${src.dir}/org/funz/calculator/Calculator.tmpl" />
    <property name="Calculator.java" location="${src.dir}/org/funz/calculator/Calculator.java" />

    <!-- classpathes -->
    <path id="core.classpath">
        <fileset dir="${core.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="client.classpath">
        <fileset dir="${client.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <path id="lib.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.path" >
        <path refid="core.classpath" />
        <path refid="lib.classpath" />
    </path>

    <!-- clean targets -->
    <target name="clean-build" description="clean up">
        <delete dir="${build.dir}" failonerror="false" />
        <delete dir="${build.ide.dir}" failonerror="false" />
    </target>

    <target name="clean-dist" description="clean up">
        <delete dir="${dist.dir}" failonerror="false"/>
    </target>    
    
    <target name="clean-doc" description="">
        <delete dir="${doc.dir}" failonerror="false" />
    </target>

    <target name="clean" depends="clean-build, clean-dist, clean-doc" />

    <!-- compilation and installation -->
    <target name="compile" description="compile the source">
        <if>
            <equals arg1="$${monitor}" arg2="${monitor}" />
            <then>
                <echo message="No monitor"/>
                <copy file="${Calculator.tmpl}" tofile="${Calculator.java}" overwrite="true" />
                <replace file="${Calculator.java}" token="__MONITOR__" value='""' />
            </then>
            <else>
                <echo message="Monitor: ${monitor}"/>
                <copy file="${Calculator.tmpl}" tofile="${Calculator.java}" overwrite="true" />
                <replace file="${Calculator.java}" token="__MONITOR__" value="${monitor}" />
            </else>
        </if>

        <mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               debug="true"
               encoding="ISO-8859-1"
               source="${java.compiler.version}"
               target="${java.compiler.version}" >
            <classpath refid="compile.path" />
        </javac>
    </target>

    <target name="dist" depends="compile" description="generate the distribution">
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.lib.dir}" />
        <mkdir dir="${dist.plugins.calculator.dir}" />
        <jar destfile="${dist.lib.dir}/${calculator.jar}">
            <fileset dir="${build.dir}">
                <include name="org/funz/calculator/**" />
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="org.funz.calculator.Calculator" />
            </manifest>
        </jar>

        <copy todir="${dist.dir}" overwrite="true">
            <fileset file="${config.dir}/${calculator.xml}"/>
        </copy>

        <copy todir="${dist.dir}" overwrite="true">
            <fileset file="${scripts.dir}/Funz*"/>
        </copy>
        <chmod perm="a+x">
            <fileset dir="${dist.dir}">
                <include name="Funz*.*" />
            </fileset>
        </chmod>

        <mkdir dir="${dist.scripts.dir}" />
        <copy todir="${dist.scripts.dir}" overwrite="true">
            <fileset dir="${scripts.dir}">
                <include name="*"/>
                <exclude name="*Funz*"/>
            </fileset>
        </copy>
        <chmod perm="a+x">
            <fileset dir="${dist.scripts.dir}">
                <include name="*.sh" />
                <include name="*.bat" />
            </fileset>
        </chmod>

        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="*" />
            </fileset>
        </copy>

        <copy todir="${dist.lib.dir}">
            <fileset dir="${core.lib.dir}">
                <include name="*" />
            </fileset>
        </copy>
    </target>

    <target name="compile-test" depends="compile" description="compile the test">
        <javac srcdir="${test.dir}"
               destdir="${build.dir}"
               debug="true"
               encoding="ISO-8859-1"
               source="${java.compiler.version}"
               target="${java.compiler.version}" >
            <classpath refid="compile.path" />
            <classpath path="${build.dir}" />
            <classpath path="${unit.test.jar}" />
            <classpath path="../funz-client/build" />
        </javac>
    </target>

    <target name="dist-test" depends="dist, compile-test" description="add the test resources to dist">
        <copy todir="." >
            <fileset file="${test.resources.dir}/*"/>
        </copy>
        <chmod perm="a+x">
            <fileset dir=".">
                <include name="*.sh" />
                <include name="*.bat" />
            </fileset>
        </chmod>

        <copy todir="." >
            <fileset file="${test.resources.dir}/*"/>
        </copy>

        <copy todir="${dist.dir}" overwrite="true">
            <fileset file="${test.config.dir}/*"/>
        </copy>
        <!--java classname="org.funz.conf.Configuration" fork="true" >
            <classpath refid="client.classpath" />
            <jvmarg value="-Dcharset=ISO-8859-1" />
            <arg value="${test.config.dir}/${quotas.xml}" />
            <redirector output="${dist.dir}/${quotas.hex}" />
        </java-->

        <jar destfile="${dist.dir}/plugins/calc/CatnCount.cplugin.jar">
            <fileset dir="${build.dir}">
                <include name="org/funz/**/CatnCount_CPlugin*.class" />
            </fileset>
        </jar>
    </target>

    <target name="test" depends="dist-test, compile-test">

        <fileset id="tests" dir="${build.dir}" includes="**/*Test.class" />
        <!--property name="tests.p" refid="tests"/>
        <echo message="${tests.p}"/-->

        <pathconvert pathsep="${line.separator}" property="tests.list" refid="tests">
            <map from="${build.dir}/" to=""/>
        </pathconvert>
        <!--echo message="${tests.list}"/>
        <echo message="================"/-->
        
        <for list="${tests.list}" param="test.class" delimiter="${line.separator}">
            <sequential>
                <echo message="======================================="/>
                <echo message="============= @{test.class} ============="/>
                <echo message="========================================="/>
                <propertyregex property="test.class" input="@{test.class}" regexp="\.class" replace="" global="true" override="true"/>
                <!--echo message="${test.class}"/-->
                <propertyregex property="test.class.id" input="${test.class}" regexp="[/\\]" replace="\." global="true"  override="true"/>
                <!--echo message="${test.class.id}"/-->
                
                <record name="${test.class.id}.txt" action="start"/>
                <jacoco:coverage>
                    <java classname="${test.class.id}" fork="true" timeout="360000" failonerror="false" resultproperty="@{test.class}.failed">
                        <jvmarg value='-Dnashorn.args="--no-deprecation-warning"'/>
                        <classpath refid="lib.classpath" />
                        <classpath refid="core.classpath" />
                        <classpath refid="client.classpath" />
                        <classpath path="${build.dir}" />
                        <classpath path="${unit.test.jar}" />
                        <assertions>
                            <enable/>
                        </assertions>
                    </java>
                </jacoco:coverage>   
                <record name="${test.class.id}.txt" action="stop"/>
                <if>
                    <equals arg1="${@{test.class}.failed}" arg2="0" />
                    <then>
                    </then>
                    <else>
                        <property name="failed" value="1" />                        
                        <echo message="Failures: @{test.class}" />
                    </else>
                </if>
            </sequential>
        </for>
        <fail message="Test failure detected, check test results." if="failed" />
    </target>

    <target name="coverage" >
        <jacoco:report>
                        
            <executiondata>
                <file file="jacoco.exec"/>
            </executiondata>
                        
            <structure name="funz-calculator">
                <classfiles>
                    <fileset dir="build"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="src/main/java"/>
                </sourcefiles>
            </structure>
                        
            <html destdir="coverage"/>
            <xml destfile="jacoco.xml"/>
                        
        </jacoco:report>
    </target>

    <target name="doc" >
        <mkdir dir="${doc.dir}" />
        <javadoc sourcepath="${src.dir}" packagenames="org.funz.*" classpathref="compile.path" destdir="${doc.dir}" access="public"/>
    </target>

    <target name="doc-CPlugin" >
        <mkdir dir="${doc.dir}" />
        <mkdir dir="${doc.dir}/cplugin" />
        <javadoc sourcepath="${src.dir}" packagenames="org.funz.calculator.plugin.*" classpathref="compile.path" destdir="${doc.dir}/cplugin" access="protected"/>
    </target>
    
    <!-- run application -->
    <target name="run-calculator">
        <java classname="org.funz.calculator.Calculator" fork="true">
            <jvmarg value='-Dnashorn.args="--no-deprecation-warning"'/>            
            <classpath refid="compile.path" />
            <classpath path="${build.dir}" />
            <jvmarg value="-Dapp.home=." />
            <arg value="file:${calculator.xml}" />
        </java>
    </target>

    <!-- help -->
    <target name="help" description="display the help on standard output">
        <echo message="********************************" />
        <echo message="        Funz calculator" />
        <echo message="********************************" />
        <echo />
        <echo message="help			  :	display this help" />
        <echo message="clean          :	clean everything that can be generated by ant targets" />
        <echo message="dist		  	  :	generate a distribution" />
        <echo message="test			  :	run tests" />
        <echo message="run-calculator :	run the application" />
        <echo message="doc			  :	generate the code documentation" />
    </target>


</project>
